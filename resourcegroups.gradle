class MultiDirRes implements Plugin<Project> {

    @Override
    void apply(final Project project) {
        //is it an android project ? if so then apply the plugin.
        if (project.pluginManager.hasPlugin("com.android.application")
                || project.pluginManager.hasPlugin("com.android.library")) {
            applyMultiSourceDir(project)
        } else {
            println("Not android based project, thus disabling plugin.")
        }
    }

    final def resDirs = [
            "anim",
            "color",
            "drawable",
            "mipmap",
            "drawable-hdpi",
            "drawable-mdpi",
            "drawable-xhdpi",
            "drawable-xxhdpi",
            "layout",
            "values",
    ]

    void applyMultiSourceDir(Project project) {
        project.afterEvaluate {
            println "Multi res dir enabled for $project.name"
            project.android.sourceSets.each {
                def rootResDir = it.res.srcDirs[0]
                List<File> srcDirs = resDirs.collect {
                    getSubDirs(it, rootResDir)
                }.flatten()
                it.res.srcDirs = srcDirs + rootResDir
            }
        }

        /**
         * Since idea is kinda broken with this: we remove the "source roots" from the iml file, thus idea will not clog up the layout folder
         */
        final def fixTask = project.task("fixImlIssue") {
            println "is in " + project.projectDir.path
            final def projectFiles = project.projectDir.listFiles(new FilenameFilter() {
                @Override
                boolean accept(File dir, String name) {
                    return name.endsWith(".iml")
                }
            })
            if (projectFiles == null || projectFiles.length != 1) {
                return
            }
            final def projectFile = projectFiles[0]

            final def projectFileName = projectFile.name
            final def toRemove = computeAllResDirNamePaths(project)

            final def correctedIml = new File(project.projectDir.path + '/correctedIml.iml')

            correctedIml.withWriter { w ->
                projectFile.eachLine { line ->
                    if (!haveBadLine(line, toRemove)) {
                        w << line + System.getProperty("line.separator")
                    }
                }
            }
            //uncomment if you want the old iml preserved
//            projectFile.renameTo(project.projectDir.path + "/${projectFileName}.iml.old")
            projectFile.delete()
            correctedIml.renameTo(project.projectDir.path + "/" + projectFileName)

        }

        project.tasks.findByName("preBuild").dependsOn(fixTask)


    }

    static final boolean haveBadLine(String line, Set<String> ignoreList) {


        final searchPart = "<sourceFolder url=\"file://\$MODULE_DIR\$"
        final def pathPart = line.indexOf(searchPart)
        if (pathPart < 0 || !line.contains("type=\"java-resource\"")) {
            //make sure its really a java resouce line
            return false
        }
        final def pathEnd = line.indexOf("\"", pathPart + searchPart.length())
        if (pathEnd < 0) {
            return false//broken xml ?...
        }
        final def resPath = line.substring(
                pathPart + searchPart.length(),
                pathEnd).replace("\\", "/")
        return ignoreList.contains(resPath)
    }

    /**
     * Computes sub dir path names from the src component so
     * "src/main/res/layout/x"
     * @param project
     * @return
     */
    Set<String> computeAllResDirNamePaths(project) {
        return new HashSet(project.android.sourceSets.collect {
            def rootResDir = it.res.srcDirs[0]
            List<File> srcDirs = resDirs.collect {
                getSubDirs(it, rootResDir).collect {
                    it.path.substring(it.path.indexOf("src") - 1).replace("\\", "/")
                }
            }.flatten()
            return srcDirs
        }.flatten())
    }

    final def getSubDirs = { final dirName, final rootResDir ->
        final def resDir = new File(rootResDir, dirName)
        def subLayoutDirs = []
        if (resDir.exists()) {
            resDir.eachDir {
                subLayoutDirs.add it
                println "\t - adding dir $it to category $dirName"
            }
        }
        return subLayoutDirs
    }
}

apply plugin: MultiDirRes

