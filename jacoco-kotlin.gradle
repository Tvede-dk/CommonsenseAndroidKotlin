apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.1"
}
afterEvaluate {
    task jacocoTestReport(type: JacocoReport, dependsOn: ['test']) {
        reports {
            xml.enabled = true
            html.enabled = true
        }
        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*']
        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
        sourceDirectories = files(android.sourceSets.main.java.srcDirs) //files([mainSrc])
        classDirectories = debugTree + kotlinDebugTree
        executionData = fileTree(dir: "$buildDir", includes: [
                "jacoco/testDebugUnitTest.exec"
        ])
    }
}
////
////task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
//    group = "Reporting"
//    description = "Generate Jacoco coverage reports for Debug build"
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    // what to exclude from coverage report
//    // UI, "noise", generated classes, platform classes, etc.
//    def excludes = [
//            '**/R.class',
//            '**/R$*.class',
//            '**/*$ViewInjector*.*',
//            '**/BuildConfig.*',
//            '**/Manifest*.*',
//            '**/*Test*.*',
//            'android/**/*.*',
//            '**/*Fragment.*',
//            '**/*Activity.*'
//    ]
//    // generated classes
//    classDirectories = fileTree(
//            dir: "$buildDir/intermediates/classes/debug",
//            excludes: excludes
//    ) + fileTree(
//            dir: "$buildDir/tmp/kotlin-classes/debug",
//            excludes: excludes
//    )
//
//    // sources
//    sourceDirectories = files([
//            android.sourceSets.main.java.srcDirs,
//            "src/main/kotlin"
//    ])
//    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")
//    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
//    // We iterate through the compiled .class tree and rename $$ to $.
//    doFirst {
//        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
//            if (file.name.contains('$$')) {
//                file.renameTo(file.path.replace('$$', '$'))
//            }
//        }
//    }
//}