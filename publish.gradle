apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
apply plugin: 'maven-publish'

version = project.commonsenseVersionName
group = project.commonsenseGroupId

artifacts {
    archives javadocJar
    archives sourcesJar

}
//
publishing {
    publications {
        MyPublication(MavenPublication) {
            artifact sourcesJar
            artifact javadocJar
            //TODO this seems hackis but it gets the job done.
            final def outputFolder = buildDir.path + "/outputs/aar/";
            final def outputFile = new File(outputFolder + artifactName + "-release.aar")
            artifact(outputFile)
            pom {
                packaging = 'aar'
                groupId = project.commonsenseGroupId
                name = artifactName
                artifactId = artifactName
                version = project.commonsenseVersionName

                licenses {
                    license {
                        name = project.commonsenseLicense
                        url = 'https://opensource.org/licenses/MIT'
                        distribution = 'repo'
                    }
                }
                scm {
                    connection = project.commonsenseGit
                    url = project.commonsenseWebsite
                }

                developers {
                    developer {
                        name = "Kasper Tvede"
                    }
                }

                withXml {
                    def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies');

                    // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included in the pom.
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

bintray {
    Properties properties = new Properties()
    try {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        user = properties.getProperty('bintrayUser')
        key = properties.getProperty('bintrayApiKey')
    } catch (Exception ignored) {
        print "could not read local.properties"
    }
    publications = ['MyPublication']
    override = true
    pkg {
        repo = project.commonsenseRepoName
        name = artifactName
        userOrg = project.commonsenseUserOrg
        desc = artifactDescription
        licenses = project.commonsenseLicense
        publish = false
        publicDownloadNumbers = true
        vcsUrl = project.commonsenseGit
        version {
            name = project.commonsenseVersionName
            desc = versionDescription
        }
    }
}